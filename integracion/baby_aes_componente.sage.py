

# This file was *autogenerated* from the file integracion/baby_aes_componente.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_4 = Integer(4); _sage_const_0xdc60 = Integer(0xdc60); _sage_const_0x4ac7 = Integer(0x4ac7); _sage_const_0x21c2 = Integer(0x21c2); _sage_const_0x6716 = Integer(0x6716); _sage_const_60 = Integer(60)#!/usr/bin/env sage

from babyAES_block_cipher import BabyAESCipher

def reverse_bits_16(value):
    return int(format(value, '016b')[::-_sage_const_1 ], _sage_const_2 )

babyAES = BabyAESCipher(number_of_rounds=_sage_const_3 , word_size=_sage_const_4 , state_size=_sage_const_2 )

pt_inv = _sage_const_0xdc60 
ct_inv = _sage_const_0x4ac7 
key_original = _sage_const_0x21c2 
key_recovered = _sage_const_0x6716 

key_orig_inv = reverse_bits_16(key_original)
key_recovered_inv = reverse_bits_16(key_recovered)

print("Probando todas las combinaciones en el mundo invertido:")
print("="*_sage_const_60 )

tests = [
    (pt_inv, key_original, "Key original"),
    (pt_inv, key_orig_inv, "Key original invertida"),
    (pt_inv, key_recovered, "Key recuperada"),
    (pt_inv, key_recovered_inv, "Key recuperada invertida"),
]

for pt, key, desc in tests:
    ct = babyAES.evaluate([key, pt])
    match = "✓" if ct == ct_inv else ""
    print(f"{desc:25s}: Key=0x{key:04x} → CT=0x{ct:04x} {match}")

print(f"\nCT esperado: 0x{ct_inv:04x}")

print("\n" + "="*_sage_const_60 )
print("Si ninguna coincide, entonces hay un bug más profundo en CLAASP")

